// Generated by CoffeeScript 1.9.3
(function() {
  var collectionLink, documentDBUtils, expandSproc, fs, getHandler, loadSprocFromFile, path;

  path = require('path');

  fs = require('fs');

  documentDBUtils = require('documentdb-utils');

  expandSproc = require('./expandSproc');

  collectionLink = null;

  loadSprocFromFile = function(sprocFile, callback) {
    var config, ref, sprocName, sprocString;
    ref = expandSproc(sprocFile), sprocString = ref.sprocString, sprocName = ref.sprocName;
    config = {
      storedProcedureID: sprocName,
      storedProcedureJS: sprocString,
      memo: null
    };
    if (collectionLink != null) {
      config.collectionLink = collectionLink;
    } else {
      config.databaseID = 'test-stored-procedure';
      config.collectionID = 'test-stored-procedure';
    }
    return documentDBUtils(config, function(err, response) {
      if (err != null) {
        throw new Error(err);
      } else {
        collectionLink = response.collectionLink;
        return callback(sprocName, response.storedProcedureLink);
      }
    });
  };

  getHandler = function(storedProcedureLink, storedProcedureName) {
    var handler;
    handler = function(req, res, next) {
      var config;
      config = {
        storedProcedureLink: storedProcedureLink,
        memo: {
          params: req.params,
          query: req.query,
          body: req.body || {},
          authorization: req.authorization
        }
      };
      return documentDBUtils(config, function(err, response) {
        var toReturn;
        if (err != null) {
          throw new Error(err);
          throw new Error("Error calling stored procedure " + storedProcedureName + "\n" + (JSON.stringify(err, null, 2)));
        }
        toReturn = {
          memo: response.memo,
          stats: response.stats
        };
        res.send(200, toReturn);
        return next();
      });
    };
    return handler;
  };

  module.exports = function(sprocDirectory, server, callback) {
    var fullFilePath, fullSprocFiles, i, len, loadOneSproc, sprocFile, sprocFiles, sprocLinks;
    sprocLinks = {};
    sprocFiles = fs.readdirSync(sprocDirectory);
    fullSprocFiles = [];
    for (i = 0, len = sprocFiles.length; i < len; i++) {
      sprocFile = sprocFiles[i];
      fullFilePath = path.join(sprocDirectory, sprocFile);
      fullSprocFiles.push(fullFilePath);
    }
    loadOneSproc = function(callback) {
      if (fullSprocFiles.length > 0) {
        sprocFile = fullSprocFiles.pop();
        return loadSprocFromFile(sprocFile, function(sprocName, sprocLink) {
          var dashIndex, handler, routeEntity, routeMethod;
          sprocLinks[sprocName] = sprocLink;
          dashIndex = sprocName.indexOf('-');
          routeMethod = sprocName.substr(0, dashIndex);
          routeEntity = sprocName.substr(dashIndex + 1);
          handler = getHandler(sprocLink, sprocName);
          switch (routeMethod) {
            case 'del':
            case 'put':
              server.del('/' + routeEntity + '/:link', handler);
              break;
            case 'get':
              server.get('/' + routeEntity + '/:link', handler);
              server.get('/' + routeEntity, handler);
              break;
            case 'post':
              server.post('/' + routeEntity + '/:link', handler);
              server.post('/' + routeEntity, handler);
              break;
            default:
              console.log('Warning, unrecognized routeMethod: ' + routeMethod + 'for ' + sprocName);
          }
          if (fullSprocFiles.length > 0) {
            return loadOneSproc(callback);
          } else {
            server.locals.sprokLinks = sprocLinks;
            return callback();
          }
        });
      }
    };
    return loadOneSproc(callback);
  };

}).call(this);
